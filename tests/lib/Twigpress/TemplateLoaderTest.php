<?php

/**
 * Test class for Twigpress_Template_Loader.
 * Generated by PHPUnit on 2012-03-21 at 00:46:54.
 */
class Twigpress_Template_LoaderTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Twigpress_Template_Loader
     */
    protected $env; 
    protected $object;
    protected $env_barebones; 
    protected $object_barebones;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    
    private function makefile($fn){
        
        $dir = PROJECT_ROOT.'/tests/mockups/themes/tmp/';
        
        if (!is_dir($dir)) {
            mkdir($dir);
        }
        $file = $dir.$fn;
        $fh = fopen($file, 'w') or die("can't open file");
        fclose($fh);
 
    }


    protected function setUp() {

        $this->query = new Wp_Query_stub;
        $this->query->queried_object = new Fake_Obj_stub;
        $this->object = new Twigpress_TemplateLoader(array(PROJECT_ROOT.'/tests/mockups/themes/tmp/'));
        $this->env_barebones = new Twigpress_Environment();
        $this->object_barebones = new Twigpress_TemplateLoader(array(PROJECT_ROOT.'/tests/mockups/themes/BarebonesTheme/'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
     
    }
    
    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGet_template().
     * 
     */
    public function test_Get_Template_404() {
        $this->query->type = '404';
        $this->makefile('404.html.twig');
        $this->assertEquals('404.html.twig', $this->object->get_template($this->query));
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query));    
    }

    public function test_Get_Template_Search() {
        $this->query->type = 'search';
        $this->makefile('search.html.twig');
        $this->assertEquals('search.html.twig', $this->object->get_template($this->query));
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query));    
    }
    
    public function test_Get_Template_Tax() {

        $this->query->type = 'tax';
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query));  
        
        $this->makefile('taxonomy.html.twig');
        $this->assertEquals('taxonomy.html.twig', $this->object->get_template($this->query));
        
        $this->query->queried_object->taxonomy = 'tax';
        $this->makefile('taxonomy-tax.html.twig');
        $this->assertEquals('taxonomy-tax.html.twig', $this->object->get_template($this->query));
        
        $this->query->queried_object->slug = 'slug';
        $this->makefile('taxonomy-tax-slug.html.twig');
        $this->assertEquals('taxonomy-tax-slug.html.twig', $this->object->get_template($this->query));
    }
    
    public function test_Get_Template_Front_Page() {

        $this->query->type = 'front_page';
        
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('front_page.html.twig');
        $this->assertEquals('front_page.html.twig', $this->object->get_template($this->query));
    }
    
    public function test_Get_Template_Home() {

        $this->query->type = 'home';

        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        
        $this->makefile('home.html.twig');
        $this->assertEquals('home.html.twig', $this->object->get_template($this->query));
    }
    
    public function test_Get_Template_Attachent() {

        $this->query->type = 'attachment';
        $this->markTestIncomplete();
      
    }
    
    public function test_Get_Template_Single() {

        $this->query->type = 'single';
        $this->query->queried_object->post_type = 'doesnotexist';
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('single.html.twig');
        $this->assertEquals('single.html.twig', $this->object->get_template($this->query));
        $this->query->queried_object->post_type = 'post_type';
        $this->makefile('single-post_type.html.twig');
        $this->assertEquals('single-post_type.html.twig', $this->object->get_template($this->query));
    }
    
    public function test_Get_Template_Page() {

        $this->query->type = 'page';
        $this->markTestIncomplete();
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('page.html.twig');
        $this->assertEquals('page.html.twig', $this->object->get_template($this->query));
    }
    
    public function test_Get_Template_Category() {

        $this->query->type = 'category';
        
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('category.html.twig');
        $this->assertEquals('category.html.twig', $this->object->get_template($this->query));
        
        $this->query->queried_object->slug = 'slug';
        $this->makefile('category-slug.html.twig');
        $this->assertEquals('category-slug.html.twig', $this->object->get_template($this->query));
        
        $this->query->queried_object->slug = 'null';
        $this->query->queried_object->term_id = 'term';
        $this->makefile('category-term.html.twig');
        $this->assertEquals('category-term.html.twig', $this->object->get_template($this->query));
    }
    
    public function test_Get_Template_Author() {

        $this->query->type = 'author';
        
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('author.html.twig');
        $this->assertEquals('author.html.twig', $this->object->get_template($this->query));
    
        $this->query->queried_object->user_nicename = 'nicename';
        $this->makefile('author-nicename.html.twig');
        $this->assertEquals('author-nicename.html.twig', $this->object->get_template($this->query));
      
        $this->query->queried_object->user_nicename = null;
        $this->query->queried_object->ID = "id"; 
        $this->makefile('author-id.html.twig');
        $this->assertEquals('author-id.html.twig', $this->object->get_template($this->query));

    }
    
    public function test_Get_Template_Date() {
        $this->query->type = 'date';
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('date.html.twig');
        $this->assertEquals('date.html.twig', $this->object->get_template($this->query)); 
    }
    
    public function test_Get_Template_Archive() {
        $this->query->type = 'archive';
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('archive.html.twig');
        $this->assertEquals('archive.html.twig', $this->object->get_template($this->query));
      
    }
    
    public function test_Get_Template_Comments_Popup() {
        $this->query->type = 'comments_popup';
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('comments_popup.html.twig');
        $this->assertEquals('comments_popup.html.twig', $this->object->get_template($this->query));
      
    }
    
    public function test_Get_Template_Paged() {
        $this->query->type = 'paged';
        $this->assertEquals('index.html.twig', $this->object_barebones->get_template($this->query)); 
        $this->makefile('paged.html.twig');
        $this->assertEquals('paged.html.twig', $this->object->get_template($this->query));
    }
  
}